// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String   @unique
  password        String
  role            String   // admin, teacher, student
  isActive        Boolean  @default(true)
  resetOtp        String?
  resetOtpExpireAt Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  studentProfile  Student?
  teacherProfile Teacher?
  announcements  Announcement[]

  @@map("users")
}

model Student {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  name      String
  email     String   @unique
  rollNo    String   @unique
  classId   String   @db.ObjectId
  section   String
  phone     String?
  address   String?
  bloodGroup String?
  parentName String?
  parentPhone String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
  attendance Attendance[]
  results   Result[]

  @@map("students")
}

model Teacher {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  name      String
  email     String   @unique
  employeeId String  @unique
  subject   String
  phone     String?
  address   String?
  qualification String?
  experience Int?
  salary     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  subjects  Subject[]
  classes   Class[]
  attendance Attendance[]

  @@map("teachers")
}

model Class {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  section   String
  capacity  Int
  teacherId String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  students  Student[]
  subjects  Subject[]
  attendance Attendance[]
  assignments Assignment[]

  @@map("classes")
}

model Subject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  code      String   @unique
  classId   String   @db.ObjectId
  teacherId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  class     Class    @relation(fields: [classId], references: [id])
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  results   Result[]
  assignments Assignment[]

  @@map("subjects")
}

model Attendance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId String   @db.ObjectId
  classId   String   @db.ObjectId
  teacherId String   @db.ObjectId
  date      DateTime
  status    String   // present, absent, late
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student   Student  @relation(fields: [studentId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
  teacher   Teacher  @relation(fields: [teacherId], references: [id])

  @@unique([studentId, classId, date])
  @@map("attendance")
}

model Result {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId String   @db.ObjectId
  subjectId String   @db.ObjectId
  examType  String   // midterm, final, assignment, quiz
  marks     Float
  totalMarks Float
  percentage Float
  grade     String?
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student   Student  @relation(fields: [studentId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])

  @@unique([studentId, subjectId, examType])
  @@map("results")
}

model Announcement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  authorId  String   @db.ObjectId
  isActive  Boolean  @default(true)
  priority  String   @default("normal") // low, normal, high, urgent
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author    User     @relation(fields: [authorId], references: [id])

  @@map("announcements")
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  type        String   // exam, holiday, event, meeting
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("events")
}

model Assignment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  subjectId   String   @db.ObjectId
  classId     String   @db.ObjectId
  dueDate     DateTime
  totalMarks  Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subject    Subject  @relation(fields: [subjectId], references: [id])
  class      Class    @relation(fields: [classId], references: [id])

  @@map("assignments")
} 